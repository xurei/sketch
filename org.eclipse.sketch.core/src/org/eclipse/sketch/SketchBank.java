/*******************************************************************************
 * Copyright (c) 2010 Ugo Sangiorgi and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Ugo Sangiorgi <ugo.sangiorgi@gmail.com> - Initial contribution
 *******************************************************************************/
package org.eclipse.sketch;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.InvalidPropertiesFormatException;
import java.util.Iterator;
import java.util.Properties;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;



/**
 * Very basic implementation of a Sketch database, using properties and storing ONLY the sketched in string form (based on
 * work from Adrien Coyette, Sascha Schimke, Jean Vanderdonckt, and Claus Vielhauer - http://www.isys.ucl.ac.be/bchi/publications/2007/Schimke-Interact2007.pdf).
 *
 * TODO: store the whole Sketch object - bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=312513.
 * @author  Ugo Sangiorgi
 */
public class SketchBank {

	String path = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + File.separator + "sketches.xml";
	//String path = "/home/ugo/runtime-shapes.product/sketches.xml";
	
	
	//Types defined by Object. Usually an IElementType or a plain String 
	public ArrayList types = new ArrayList();

	//all the words associated with a type, represented by its name, in case of IElementType, or itself in case of a String
	public static HashMap<String, ArrayList<String>> maps = new HashMap<String, ArrayList<String>>();

	private static SketchBank instance;

	public static SketchBank getInstance() {
		if (instance == null)
			instance = new SketchBank();

		return instance;
	}

	private SketchBank(){
		
		//if there is a bank already at the disk, fill the maps
		fetch();
		
	}

	public void reset(){
		File f = new File(path);
		f.delete();
		
		
		maps = new HashMap<String, ArrayList<String>>();
		dump();
		
	}
	
	/**
	 * SketchTool classes set their recognizable types using this method
	 * @param t
	 */
	public void setTypes(ArrayList t) {
		
		//merge the already existing types in the properties file, with those
		for(int i=0;i<t.size();i++){
			Object newType = t.get(i);
			if(!types.contains(getName(newType))){
				types.add(getName(newType));
				maps.put(getName(newType), new ArrayList<String>());
			}
		}		

	}
	
	public ArrayList<Object> getAvailableTypes(){
		return types;
	}

	public ArrayList<String> getSketches(Object type) {
		return maps.get(getName(type));
	}

	public void insert(Object type){

		if(!this.types.contains(getName(type))){
			this.types.add(getName(type));
		}
			
		maps.put(getName(type), new ArrayList<String>());
	}
	
	public void add(Object type, String dna) {
		maps.get(getName(type)).add(dna);
	}

	public void dump() {
		OutputStream out = null;
		try {

			Properties properties = new Properties();
			for (int i = 0; i < types.size(); i++) {
				Object type = types.get(i);
				ArrayList<String> sketches = getSketches(getName(type));
				if(sketches != null){
					for (int j = 0; j < sketches.size(); j++) {
					
						properties.put(sketches.get(j), getName(type));
					

					}
				}
			}

			
			out = new FileOutputStream(path);
			properties.storeToXML(out, "Generated by Eclipse Sketch - sketches made by "
					+ System.getProperty("user.name"));

			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void fetch() {

		try {
			InputStream in = new FileInputStream(path);
			
			Properties properties = new Properties();
			properties.loadFromXML(in);

			Iterator it = properties.keySet().iterator();

			while (it.hasNext()) {
				String sketch = (String) it.next();

				String type = properties.getProperty(sketch);
				
				ArrayList<String> sketches = maps.get(getName(type));
				if(sketches==null){
					sketches = new ArrayList<String>();
					sketches.add(sketch);
					insert((Object)type);
					maps.put(type, sketches);
					
				}else{
					if(!sketches.contains(sketch))
						sketches.add(sketch);						
				}
				
			}

		} catch (FileNotFoundException e) {
			dump();
		} catch (InvalidPropertiesFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	
	
	public String getName(Object type){
		if(type instanceof IElementType)
			return ((IElementType)type).getDisplayName();
		else
			return (String)type;
		
	}
	
	
	//test
	public static void main(String[] args) throws Exception{
		
		ArrayList types = new ArrayList();
		types.add("Square");
		types.add("Circle");				
		SketchBank.getInstance().setTypes(types);
		
		SketchBank.getInstance().insert("objeto novo");
		SketchBank.getInstance().add("objeto novo", "12312312");
		SketchBank.getInstance().add("objeto novo", "122342342");
		
		SketchBank.getInstance().add("Square", "44444444");
		
		SketchBank.getInstance().dump();
		SketchBank.getInstance().fetch();
		
		SketchBank.getInstance().add("Circle", "3423423423");
		SketchBank.getInstance().dump();
		
		
		
	}
}
